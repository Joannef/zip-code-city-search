{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["City","data","className","State","Lat","Long","EstimatedPopulation","TotalWages","ZipSearchField","userIn","onChange","type","value","App","props","state","cities","event","target","length","fetch","then","res","json","body","console","log","setState","catch","err","toUpperCase","this","e","userInChanged","map","c","index","isCity","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAIA,SAASA,EAAT,GAAuB,IAARC,EAAO,EAAPA,KAEX,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SACID,EAAKD,OAET,qBAAKE,UAAU,YAAf,SACE,+BACE,yCAAYD,EAAKE,SACjB,6CAAgBF,EAAKG,IAArB,KAA4BH,EAAKI,KAAjC,OACA,yDAA4BJ,EAAKK,oBAAjC,OACA,gDAAmBL,EAAKM,WAAxB,eASZ,SAASC,EAAT,GAA6C,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SAC/B,OACE,8BACE,uBAAMR,UAAU,mBAAhB,UACE,iEACA,uBACES,KAAK,OACLT,UAAU,oBACVU,MAAOH,EACPC,SAAUA,S,IAsHLG,E,kDA/Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRP,OAAQ,IAJO,E,iDAOnB,SAAcQ,GAAQ,IAAD,OACfR,EAASQ,EAAMC,OAAON,MAGL,IAAlBH,EAAOU,OACVC,MAAM,wCAAD,OAAyCX,IAC3CY,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZX,OAAQQ,OAGXI,OAAM,SAACC,GACNJ,QAAQC,IAAI,OACZ,EAAKC,SAAS,CACZX,OAAQ,QAIVI,MAAM,yCAAD,OAA0CX,EAAOqB,gBACrDT,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZX,OAAQQ,OAGXI,OAAM,SAACC,GACNJ,QAAQC,IAAI,OACZ,EAAKC,SAAS,CACZX,OAAQ,QAOhBS,QAAQC,IAAI,OACZK,KAAKJ,SAAS,CACZX,OAAQ,KAEVe,KAAKJ,SAAS,CACZlB,OAAQQ,EAAMC,OAAON,U,oBAIzB,WAAU,IAAD,OACP,OACE,sBAAKV,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,mDAEF,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,MAAf,SACE,cAACM,EAAD,CACEC,OAAQsB,KAAKhB,MAAMN,OACnBC,SAAU,SAACsB,GAAD,OAAO,EAAKC,cAAcD,UAKX,IAA7BD,KAAKhB,MAAMC,OAAOG,OACd,2CACAY,KAAKhB,MAAMC,OAAOkB,KAAI,SAACC,EAAGC,GAE1B,IAAIC,GAAS,EACb,IACEA,EAASF,EAAEnC,KACX,MAAOgC,GACPK,GAAS,EAIb,OAAGA,EAGC,qBAAKnC,UAAU,MAAf,SACE,qBAAKA,UAAU,MAAf,SACE,cAACF,EAAD,CACEC,KAAMkC,OAHeC,GAa3B,6BACE,6BAAKD,mB,GApGPG,aC5BHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae5a8897.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction City({data}) { \r\n    //do some data stuff\r\n    return (\r\n      <div className=\"card mb-4\">\r\n        <div className=\"card-header\">\r\n          { data.City}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <ul>\r\n            <li>State: {data.State}</li>\r\n            <li>Location: ({data.Lat}, {data.Long})</li>\r\n            <li>Population (Estimate): {data.EstimatedPopulation} </li>\r\n            <li>Total Wages: ${data.TotalWages} </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n\r\n}\r\n\r\nfunction ZipSearchField({userIn, onChange}) {\r\n  return (\r\n    <div>\r\n      <form className=\"form-inline my-4\">\r\n        <label>Enter Zip-Code or City Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control ml-2\"\r\n          value={userIn}\r\n          onChange={onChange}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cities: [],\r\n      userIn: '',\r\n    }\r\n  }\r\n  userInChanged(event) {\r\n    let userIn = event.target.value;\r\n\r\n    //if the userIn is a zip code\r\n    if(userIn.length === 5){\r\n    fetch(`http://ctp-zip-api.herokuapp.com/zip/${userIn}`)\r\n      .then((res) => res.json())\r\n      .then((body) => {\r\n        console.log(body);\r\n        this.setState({\r\n          cities: body\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\")\r\n        this.setState({ //if there is errors make cities null\r\n          cities: []\r\n        })\r\n      })\r\n    } else {       \r\n        fetch(`http://ctp-zip-api.herokuapp.com/city/${userIn.toUpperCase()}`)\r\n        .then((res) => res.json())\r\n        .then((body) => {\r\n          console.log(body);\r\n          this.setState({\r\n            cities: body\r\n          })\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"err\")\r\n          this.setState({ //if there is errors make cities null\r\n            cities: []\r\n          })\r\n        })\r\n    }\r\n    \r\n    \r\n\r\n    console.log(\"err\")\r\n    this.setState({ //if there is errors make cities null\r\n      cities: []\r\n    })\r\n    this.setState({\r\n      userIn: event.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <h2>Zip Code Search</h2>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <ZipSearchField\r\n                userIn={this.state.userIn}\r\n                onChange={(e) => this.userInChanged(e)}\r\n              />\r\n            </div>\r\n          </div>\r\n          {\r\n            this.state.cities.length === 0 \r\n              ? <p>No Results</p>\r\n              : this.state.cities.map((c, index) => {\r\n\r\n                let isCity = false; //this checks if cities is a json object or not\r\n                try{\r\n                  isCity = c.City;\r\n                } catch (e){\r\n                  isCity = true;\r\n                }\r\n\r\n              \r\n              if(isCity){ //this runs if cities is a json (it is cities)\r\n               \r\n                return (\r\n                  <div className=\"row\" key ={index}>\r\n                    <div className=\"col\">\r\n                      <City \r\n                        data={c}\r\n                        \r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n              else{ //this means that a zip was entered isntead\r\n                //maybe add styling here?????\r\n                return(\r\n                  <ul>\r\n                    <li>{c}</li>\r\n                  </ul>\r\n\r\n                )\r\n              }\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n/*\r\nnpm install -g npm@latest\r\nTODO:\r\n- Display more data about each city  -DONE\r\n- remove results when extra characters are typed -DONE\r\n- display \"no results\" if the zip is incorrect instead of empty -DONE\r\n- add checks to prevent multiple requests if we know zip is invalid format -DONE\r\n*/","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}